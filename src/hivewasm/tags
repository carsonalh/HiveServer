!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/Carson/Projects/HiveServer/src/hivewasm/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
ExportEnumConstants	./main.go	/^func ExportEnumConstants(object js.Value) {$/;"	f	package:main
HiveColorFromJsValue	./main.go	/^func HiveColorFromJsValue(value js.Value) (hivegame.HiveColor, bool) {$/;"	f	package:main	typeref:typename:(hivegame.HiveColor, bool)
HiveGameToJsValue	./main.go	/^func HiveGameToJsValue(game hivegame.HiveGame) js.Value {$/;"	f	package:main	typeref:typename:js.Value
JsValueToHexVectorInt	./main.go	/^func JsValueToHexVectorInt(value js.Value) (hivegame.HexVectorInt, bool) {$/;"	f	package:main	typeref:typename:(hivegame.HexVectorInt, bool)
JsValueToHiveGame	./main.go	/^func JsValueToHiveGame(value js.Value) (hivegame.HiveGame, error) {$/;"	f	package:main	typeref:typename:(hivegame.HiveGame, error)
JsValueToHivePieceType	./main.go	/^func JsValueToHivePieceType(value js.Value) (hivegame.HivePieceType, bool) {$/;"	f	package:main	typeref:typename:(hivegame.HivePieceType, bool)
JsValueToHiveTile	./main.go	/^func JsValueToHiveTile(value js.Value) (hivegame.HiveTile, bool) {$/;"	f	package:main	typeref:typename:(hivegame.HiveTile, bool)
JsValueToInt	./main.go	/^func JsValueToInt(value js.Value) (int, bool) {$/;"	f	package:main	typeref:typename:(int, bool)
colorToMove	./main.go	/^func colorToMove(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
createHiveGame	./main.go	/^func createHiveGame(_ js.Value, _ []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
getTilesRemaining	./main.go	/^func getTilesRemaining(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
idOfLastPlaced	./main.go	/^func idOfLastPlaced(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
idOfTileAt	./main.go	/^func idOfTileAt(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
isOver	./main.go	/^func isOver(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
legalMoves	./main.go	/^func legalMoves(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
legalPlacements	./main.go	/^func legalPlacements(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
main	./main.go	/^func main() {$/;"	f	package:main
main	./main.go	/^package main$/;"	p
moveNumber	./main.go	/^func moveNumber(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
moveTile	./main.go	/^func moveTile(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
pieceTypeStrings	./main.go	/^var pieceTypeStrings = map[hivegame.HivePieceType]string{$/;"	v	package:main
placeTile	./main.go	/^func placeTile(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
tiles	./main.go	/^func tiles(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
winner	./main.go	/^func winner(_ js.Value, args []js.Value) interface{} {$/;"	f	package:main	typeref:typename:interface{}
